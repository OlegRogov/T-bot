import telebot
from telebot import types

token = '7253466898:AAGsoJFIoOaEFbpUBT9UYSB3KjzYDHxg2do'
bot = telebot.TeleBot(token)

fizik = {
    'кинематика': {
        'Равномерное движение': 'x=x0+v*t',
        'Путь, время, скорость': 's=v*t',
        'Равномерно ускоренное движение: ускорение': 'a=(v-v0)/t',
        'Равномерно ускоренное движение: скорость': 'v=v0+a*t',
        'Равномерно ускоренное движение: путь': 's=v*t+(a*t^2)/2',
        'Равномерно ускоренное движение: координата': 'x=x0+v*t+(a*t^2)/2',
        'Высота тела, брошенного вертикально вверх (вниз)': 'h=h0+v0*t+(g*t^2)/2',
        'Скорость тела, брошенного вертикально вверх (вниз)': 'v=v0-g*t',
        'Скорость, ускорение, время': 'v=a*t',
        'Скорость свободно падающего тела': 'v=g*t',
        'Центростремительное ускорение(1)': 'a=v^2/R',
        'Угловая скорость': 'ω=φ/t',
        'Равномерное круговое движение': 'l=R*φ',
        'Равномерное круговое движение: линейная скорость': 'v=R*ω',
        'Период вращения(1)': 'T=t/N',
        'Период вращения(2)': 'T=2*π*R/v',
        'Период вращения(3)': 'T=2*π/ω',
        'Центростремительное ускорение(2)': 'a=4*π^2*R/T^2',
        'Центростремительное ускорение(3)': 'a=4*π^2*R*n^2',
        'Частота вращения': 'n=1/T',
        'Центростремительное ускорение(4)': 'a=ω^2*R',
        'Дальность броска тела, брошенного под углом к горизонту': 'x=v0*t*cos(α)',
        'Высота подъема тела, брошенного под углом к горизонту': 'y=v0*t*sin(α)-g*t^2/2',
        'Вертикальная скорость тела, брошенного под углом к горизонту': 'v=v0*sin(α)-g*t',
        'Максимальная высота подъема тела, брошенного под углом к горизонту': 'h=v0^2*sin(α)^2/(2*g)',
        'Общее время движения тела, брошенного под углом к горизонту': 't=2*v0*sin(a)/g',
        'Максимальная дальность броска тела, брошенного под углом к горизонту': 's=v0^2/g',
        'Дальность броска тела, брошенного горизонтально': 'x=x0+v*t',
        'Высота подъема тела, брошенного горизонтально': 'y=y0-g*t^2/2',
        'Общее время движения тела, брошенного горизонтально': 't=√2*h/g'
    },
    'динамика': {
        'Инертность, масса, ускорение': 'a1/a2=m2/m1',
        'Сила, масса, ускорение': 'F=m*a',
        'Сила тяжести': 'N=m*g',
        'Сила трения(1)': 'F=μ*N',
        'Сила трения(2)': 'F=μ*m*g',
        'Закон всемирного тяготения': 'F=(G*(m1*m2))/r^2',
        'Центростремительное ускорение спутника': 'a=v^2/(R+h)',
        'Скорость спутника': 'v=√G*M/(R+h)',
        'Первая космическая скорость (движение по круговой орбите)': 'v=√g*R',
        'Вторая космическая скорость (преодоление гравитации)': 'v=√2*g*R',
        'Третий закон Кеплера': 'T1^2/T2^2=a1^3/a2^3',
        'Ускорение свободного падения на поверхности земли': 'g=G*M/R^2',
        'Вес тела': 'P=m*g',
        'Вес тела: невесомость': 'P=m*(g-a)',
        'Вес тела: перегрузка': 'P=m*(g+a)',
        'Время торможения(1)': 't=m*v/F',
        'Время торможения(2)': 't=v/μ*g',
        'Путь торможения(1)': 's=m*v^2/(2*F)',
        'Путь торможения(2)': 's=v^2/(2*μ*g)',
        'Сила трения качения': 'F=μ*N/R',
        'Сила упругости': 'F=k*x',
        'Кинетическая энергия вращающегося тела': 'W=J*ω^2/2'

    },
    'законы сохранения в механике': {
        'Импульс': 'p=m*v',
        'Механическая работа': 'A=F*s',
        'Механическая работа и угол': 'A=F*s*cos(a)',
        'Мощность(1)': 'N=A/t',
        'Мощность(2)': 'N=F*v',
        'Коэффициент полезного действия(1)': 'η=A_n/A',
        'Коэффициент полезного действия(2)': 'η=P_n/P',
        'Механическая энергия': 'E=E_k+E_p',
        'Кинетическая энергия': 'E=m*v^2/2',
        'Кинетическая энергия и импульс': 'E=p^2/2*m',
        'Потенциальная энергия': 'E=m*g*h',
        'Потенциальная энергия сжатой (растянутой) пружины': 'E=k*x^2/2'

    },
    'молекулярная физика': {
        'Уравнение Менделеева-Клайперона': 'P*V=n*R*T',
        'Закон Бойля-Мариотта': 'P*V=const',
        'Закон Гей-Люссака': 'V/T=const',
        'Закон Шарля': 'P*T=const',
        'Формула для расчёта количества теплоты': 'Q=ms(t2-t1)',
        'Первый закон термодинамики': 'Q=A+ΔU',
        'Формула расчёта термодинамического потенциала для энтальпии': 'd*H=T*d*S+V*d*p',
        'Основное уравнение молекулярно-кинетической теории': 'P=n*k*T',
        'Формула числа частиц': 'N=Na*V'

    },
    'термодинамика': {
        'Внутренняя энергия одноатомного газа(1)': 'U=3*m*R*T/(2*M)',
        'Внутренняя энергия одноатомного газа(2)': 'U=3*ν*R*T/2',
        'Удельная теплота газа': 'c=3*R/2*M',
        'Работа расширения газа': 'A=p*ΔV',
        'Работа изотермического расширения газа': 'A=m*R*T/M*ln(V2/V1)',
        'Первый закон термодинамики': 'ΔU=A+Q',
        'Коэффициент полезного действия теплового двигателя(1)': 'η=An/Q1',
        'Коэффициент полезного действия теплового двигателя(2)': 'η=(Q1-Q2)/Q1',
        'Максимальная эффективность (коэффициент полезного действия) теплового двигателя': 'η=(T1-T2)/T1'

    },
    'электростатика': {
        'Электрический заряд': 'q=n*e',
        'Закон Кулона': 'F=k*q1*q2/r^2',
        'Постоянная Кулона': 'k=1/(4*π*ε0)',
        'Относительная диэлектрическая проницаемость': 'ε=F_vak/F_apl',
        'Электрическое поле': 'E=F/q',
        'Электрическое поле точечного заряда в вакууме': 'E=k*q0/r^2',
        'Электрическое поле точечного заряда в окружающей среде': 'E=k*q0/(ε*r^2)',
        'Электрическое поле вне заряженной сферы(1)': 'E=k*σ4*π*R^2/r^2',
        'Электрическое поле вне заряженной сферы(2)': 'E=k*q/r^2',
        'Электрическое поле бесконечной заряженной плоскости(1)': 'E=k2*π*σ',
        'Электрическое поле бесконечной заряженной плоскости(2)': 'E=σ/(2*ε0)',
        'Электрическое поле конденсатора': 'E=4*k*π*σ',
        'Работа в электрическом поле': 'A=F*Δd',
        'Потенциальная энергия системы двух точечных зарядов': 'W=k*q0*q/(ε*r)',
        'Работа в электрическом поле - разность потенциальных энергий': 'A=W1-W2',
        'Потенциал электростатического поля': 'φ=W/q',
        'Напряжение - разность потенциалов': 'U=φ1-φ2',
        'Работа переноса заряда': 'A=q*U',
        'Потенциал электростатического поля вокруг точечного заряда': 'φ=k*q0/(ε*r)',
        'Напряжённость электростатического поля': 'E=U/Δd',
        'Результирующее электрическое поле': 'E=E0-E1',
        'Электрический момент': 'p=q*l',
        'Электрическая ёмкость': 'C=q/φ',
        'Электрическая ёмкость шара': 'C=ε*R/k',
        'Электрическая ёмкость двух проводников': 'C=q/U',
        'Электрическая ёмкость плоского конденсатора': 'C=ε*ε0*S/d',
        'Электрическая ёмкость сферического конденсатора': 'C=4*π*ε*ε0*R1*R2/(R2-R1)',
        'Потенциальная энергия заряженного плоского конденсатора(1)': 'W=q*E1*d',
        'Потенциальная энергия заряженного плоского конденсатора(2)': 'W=q*U/2',
        'Потенциальная энергия заряженного плоского конденсатора(3)': 'W=C*U^2/2',
        'Потенциальная энергия заряженного плоского конденсатора(4)': 'W=ε*ε0*E^2*V/2',
        'Плотность энергии электрического поля': 'ω=W/V'

    },
    'электродинамика': {
        'Закон Кулона': 'F=q1*q2/(4*π*ε0*r^2)',
        'Разность потенциалов': 'ΔU=E*Δx',
        'Электроемкость': 'С=q/U',
        'Энергия конденсатора': 'W=CU^2/2',
        'Закон Джоуля – Ленца': 'ΔQ=I^2*R*Δt',
        'Сила Ампера': 'F=I*B*l*cosα.',
        'Закон электромагнитной индукции': 'ε=-ΔФ/Δt',
        'Магнитная энергия катушки': 'W=L*I^2/2',
        'Реактивное сопротивление': '|Z|=ωL',
        'Поле точечного заряда': 'E=q/4*π*ε0*r^2',
        'Потенциал заряженного шара': 'U=q/4*π*ε0*R',
        'Плоский конденсатор': 'С=ε0*S/d',
        'Закон Ома': 'I=U/R',
        'Сила Лоренца': 'F=q*v*B*sinα.',
        'Магнитный поток': 'Φ=B*S*cosα',
        'Индуктивность': 'L=Ф/l',
        'Колебательный контур': 'T=2*π*√(L*C)',
        'Мощность переменного тока': 'N=U*I*cosφ'

    },
    'электромагнитные колебания и волны': {
        'Колебательный контур: заряд': 'q=-qm*(ω*t)',
        'Период колебательного контура (формула Томсона)': 'T=2*π*√(L*C)',
        'Циклическая частота колебательного контура': 'ω=1/√(L*C)',
        'Частота колебательного контура': 'ν=1/2*π*√(L*C)',
        'Скорость электромагнитной волны': 'v=c/√(ε*μ)',
        'Скорость света в вакууме': 'c=√(ε0*μ0)',
        'Длина электромагнитной волны(1)': 'λ=c*T',
        'Длина электромагнитной волны(2)': 'λ=c/ν',
        'Объёмная (пространственная) плотность электромагнитной волны': 'ω=E*B/(v*ε0*μ0)',
        'Длина электромагнитной волны': 'λ=v/ν',
        'Радиолокация: расстояние': 's=c*t/2'

    },
    'постоянный электрический ток': {
        'Электродвижущая сила': 'E=A/q',
        'Электродвижущая сила - разность потенциалов': 'E=φ1-φ2',
        'Сила тока(1)': 'I=Q/T',
        'Сила тока(2)': 'I=e*n*v*S',
        'Плотность электрического тока(1)': 'j=I/S',
        'Плотность электрического тока(2)': 'j=e*n*v',
        'Сопротивление': 'R=ρ*l/S',
        'Электрическая проводимость (электропроводность)': 'λ=1/R',
        'Сопротивление и температура': 'R=R0*(1+α*t)',
        'Удельное сопротивление': 'ρ=ρ0*(1+α*t)',
        'Удельное проводимость': 'σ=1/ρ',
        'Последовательное соединение: сила тока': 'I1=I2',
        'Последовательное соединение: напряжение': 'U=U1+U2',
        'Последовательное соединение: сопротивление': 'R=R1+R2',
        'Параллельное соединение: сила тока': 'I=I1+I2',
        'Параллельное соединение: напряжение': 'U1=U2',
        'Параллельное соединение: сила тока и сопротивление': 'I1/I2=R2/R1',
        'Параллельное соединение: сопротивление(1)': '1/R=1/R+1/R2',
        'Параллельное соединение: сопротивление(2)': 'R=R1*R2/(R1+R2)',
        'Закон Ома': 'I=U/R',
        'Закон Ома для замкнутой цепи': 'E=I*R+I*r',
        'Закон Ома для замкнутой цепи: много источников тока': 'n*E=I*R+I*n*r',
        'Работа электрического тока(1)': 'A=Δq*U',
        'Работа электрического тока(2)': 'A=I*R^2*t',
        'Работа электрического тока(3)': 'A=U^2*t/R',
        'Мощность электрического тока(1)': 'P=U*I',
        'Мощность электрического тока(2)': 'P=I^2*R',
        'Мощность электрического тока(3)': 'P=U^2/R',
        'Работа и мощность электрического тока': 'A=P*t'

    },
    'механические колебания и волны': {
        'Скорость распространения волны(1)': 'v=λ/T',
        'Скорость распространения волны(2)': 'v=λ*ν',
        'Переход волны в другую окружающую среду': 'λ1/λ2=v1/v2',
        'Максимум интерференци и разность хода': 'Δd=k*λ',
        'Минимум интерференци и разность хода': 'Δd=(2*k+1)*λ/2',
        'Ускорение силы упругости': 'a=-k*x/m',
        'Сила упругости': 'F=-k*x',
        'Уравнение движения математического маятника(1)': 'a=-g*x/l',
        'Уравнение свободных колебаний': 'a=-ω^2*x',
        'Уравнение движения пружинного маятника': 'ω^2=k/m',
        'Уравнение движения математического маятника(2)': 'ω^2=g/t',
        'Свободные колебания: отклонение': 'x=x_m*cos(ω*t)',
        'Частота и период колебаний': 'ν=1/T',
        'Циклическая частота колебаний(1)': 'ω=2*π/T',
        'Циклическая частота колебаний(2)': 'ω=2*π*ν',
        'Фаза гармонических колебаний(1)': 'φ=ω*t',
        'Фаза гармонических колебаний(2)': 'φ=2*π*t/T',
        'Фаза гармонических колебаний(3)': 'φ=2*π*ν*t',
        'Гармоническое колебание: отклонение': 'x=x_m*cos(ω*t+φ)',
        'Период колебания пружинного маятника': 'T=2*π*√(m/k)',
        'Период колебания математического маятника': 'T=2*π*√(l/g)',
        'Гармонические колебания: скорость тела(1)': 'v=v_m*cos(ω*t+π/2)',
        'Гармонические колебания: скорость тела(2)': 'v=v_m*sin(ω*t)',
        'Гармонические колебания: ускорение тела(1)': 'a=-ω^2*x*cos(ω*t)',
        'Гармонические колебания: ускорение тела(2)': 'a=a_m*cos(ω*t+π)',
        'Гармонические колебания: скорость тела(3)': 'v=-ω*x*sin(ω*t)',
        'Гармонические колебания: максимальная скорость тела': 'v_m=ω*x_m',
        'Гармонические колебания: максимальное ускорение тела(1)': 'a_m=ω*v_m',
        'Гармонические колебания: максимальное ускорение тела(2)': 'a_m=ω^2*x_m',
        'Гармонические колебания: кинетическая энергия тела': 'E_k=m*v^2/2',
        'Гармонические колебания: потенциальная энергия тела': 'E_p=k*x^2/2',
        'Гармонические колебания: полная энергия тела(1)': 'E=E_k*E_p',
        'Гармонические колебания: полная энергия тела(2)': 'E=(m*v^2/2)+(K*x^2/2)',
        'Резонанс - амплитуда колебаний': 'x=F/(ω*μ)'

    },
    'оптика': {
        'Поток излучеия': 'Ф=W/t',
        'Сила света': 'I=Ф/Ω',
        'Освещенность': 'E=Ф/σ',
        'Яркость источника света': 'L=I/σ',
        'Коэффициент поглощения': 'α=Φα*/Φi',
        'Коэффициент отражения': 'ρ=Φρ/Φi',
        'Коэффициент пропускания': 'τ=Φτ/Φi',
        'Относительный показатель преломления': 'n=n2/n1',
        'Закон преломления света': 'sin1/sinr=n',
        'Предельный угол полного внутреннего отражения': 'sini=n',
        'Оптическая сила линзы': 'D+1/f',
        'Светосила линзы': 'E=(d/f)^2',
        'Увеличение лупы': 'N=D/f',
        'Увеличение микроскопа': 'N=N1*N2',
        'Увеличение зрительной (подзорной) трубы': 'N=f1/f2'

    }
}


def generate_fizik():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for item in fizik.keys():
        markup.add(item)
    return markup


def generate_items(category):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for item in fizik[category].keys():
        markup.add(item)
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    msg = bot.send_message(message.chat.id,
                           'Привет! Выбери категорию, из которой хочешь проверить формулу!',
                           reply_markup=generate_fizik())
    bot.register_next_step_handler(msg, category_selection)


def category_selection(message):
    if message.text in fizik:
        global category
        category = message.text
        msg = bot.send_message(message.chat.id,
                               f'Выберите формулу из категории {category}:',
                               reply_markup=generate_items(category))
        bot.register_next_step_handler(msg, lambda m: item_selection(m, category))
    else:
        send_welcome(message)


def item_selection(message, category):
    if message.text in fizik[category]:
        global item
        item = message.text
        msg = bot.send_message(message.chat.id,
                         'Впиши формулу!')
        bot.register_next_step_handler(msg, lambda m: check_answer(m, category, item))
    else:
        send_welcome(message)

def check_answer(message, category, item):
    asn = message.text
    if fizik[category][item] == asn:
        bot.send_message(message.chat.id,
                        'Все верно!')
    else:
        bot.send_message(message.chat.id,
                        f'Неверно! Правильный ответ {fizik[category][item]}')

bot.polling()
